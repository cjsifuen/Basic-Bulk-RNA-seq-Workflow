#snakemake-demo-rnaseq
#Christopher Sifuentes sifuentescj@gmail.com

#import modules
from __future__ import print_function, absolute_import, division
from argparse import Namespace
import collections
from collections import defaultdict
import csv
import fnmatch
from functools import partial
from functools import reduce
import glob
import hashlib
import os
from os.path import basename
from os.path import isfile
from os.path import join
from os.path import splitext
import shutil
import sys
import subprocess
import yaml
import snakemake


# define SNKDIR
SNK_DIR = os.path.dirname(srcdir("Snakefile"))

# set configuration file
configfile: os.path.join(SNK_DIR,"resources/config.yaml")

# define directories
INPUT_DIR = os.path.join(config['input_dir']['fastq'],'')
SCRIPT_DIR = os.path.join(SNK_DIR,'scripts','')
OUT_DIR = os.path.join(config['out_dir'],'')
QC_DIR = os.path.join(OUT_DIR, 'QC','')
TRIM_DIR = os.path.join(OUT_DIR, 'TRIM', '')
ALN_DIR = os.path.join(OUT_DIR, 'ALIGN', '')
COUNTS_DIR = os.path.join(OUT_DIR, 'COUNTS', '')
DIFFEX_DIR = os.path.join(OUT_DIR, 'DIFFEX','')

# grab read info
SUFFIX = config['read_info']['fastq_suffix'] + '.gz'
R1_SUFFIX = config['read_info']['r1_suffix'] + '.' + SUFFIX

#define lists of files and sample basenames
FILES = [os.path.basename(x) for x in glob.glob(INPUT_DIR + '*' + SUFFIX)]
FILES_BASE = [os.path.basename(x).split('.'+ SUFFIX)[0] for x in glob.glob(INPUT_DIR + '*' + SUFFIX)]
SAMPLES = [os.path.basename(x).split(R1_SUFFIX)[0] for x in fnmatch.filter(FILES, '*' + R1_SUFFIX)]

#trim_type
TRIM_TYPE = config['trim_info']['tool']

#define empty final outputs
FINAL_OUTPUTS = []

# qc subworkflow
subworkflow readqc:
    snakefile: 'ReadQC.snakefile'

# includes
if TRIM_TYPE == 'trim_galore':
    include: 'rules/trim_galore.snakemake'
else:
    include: 'rules/fastp.snakemake'
include: 'rules/star.snakemake'
include: 'rules/feature_counts.snakemake'
include: 'rules/clean_counts.snakemake'
include: 'rules/deseq2.snakemake'

#rule all
rule all:
    input:
        FINAL_OUTPUTS

